name: snapshot-ruby_2_7

on:
  schedule:
    - cron: '30 18 * * *' # Daily at 18:30 UTC
  repository_dispatch:
    types:
      - "make-snapshot"
      - "snapshot-ruby_2_7"
  workflow_dispatch:
    inputs:
      RUBY_PATCH_URL:
        description: Patch URL
        required: false

jobs:
  make-snapshot:
    runs-on: ubuntu-latest
    env:
      archname: snapshot-ruby_2_7
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/make-snapshot
        with:
          version: 2.7
          fetch-branch: ruby_2_7
      - uses: actions/upload-artifact@master
        with:
          name: Packages
          path: pkg
      - uses: actions/upload-artifact@master
        with:
          name: Info
          path: pkg/info
      - name: Check pkg
        run: |
          set -x
          ls -al pkg
          7z x pkg/*.zip $archname/revision.h
          cat $archname/revision.h
          7z l pkg/*.zip $archname/ChangeLog
      - name: Upload s3
        run: |
          set -x
          for ext in .tar.gz .tar.bz2 .tar.xz .zip; do
            aws s3 cp "pkg/$archname$ext" "s3://ftp.r-l.o/pub/ruby/snapshot/$archname$ext" --no-progress
            curl -sS -X PURGE -H "Fastly-Soft-Purge:1" "https://cache.ruby-lang.org/pub/ruby/snapshot/$archname$ext"
          done
          for ext in .json .yml; do
            aws s3 cp "pkg/info/info$ext" "s3://ftp.r-l.o/pub/ruby/snapshot/$archname$ext" --no-progress
            curl -sS -X PURGE -H "Fastly-Soft-Purge:1" "https://cache.ruby-lang.org/pub/ruby/snapshot/$archname$ext"
          done
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.FTP_R_L_O_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.FTP_R_L_O_AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-west-2
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "text": "${{ job.status }}: make-snapshot <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
        if: failure()

  ubuntu:
    needs: make-snapshot
    strategy:
      matrix:
        test_task: [check, test-bundler, test-bundled-gems]
        os: [ubuntu-20.04, ubuntu-18.04]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - run: env | sort
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - uses: actions/download-artifact@master
        with:
          name: Packages
          path: pkg
      - name: Extract
        run: tar xf pkg/*.tar.xz
      - name: Apply patch
        run: |
          set -x
          curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
          cd snapshot-*/
          git apply ../ruby.patch
        shell: bash
        env:
          RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
        if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
      - name: Update spec
        run: |
          set -x
          git clone --depth=1 https://github.com/ruby/ruby ruby
          cd snapshot-*/
          rm -rf spec/mspec spec/ruby
          mv -v ../ruby/spec/mspec ../ruby/spec/ruby spec
        if: matrix.test_task == 'check'
      - name: Install libraries
        run: |
          set -x
          sudo apt-get update -q || :
          # postfix `-` means `uninstall`
          APT_INSTALL_RUBY=ruby-
          APT_INSTALL_GIT=git-
          case "${{ matrix.test_task }}" in
            test-bundled-gems)
              # test-bundled-gems requires executable host ruby
              APT_INSTALL_RUBY=ruby
              # test-bundled-gems-fetch requires git
              unset APT_INSTALL_GIT
              ;;
            test-bundler)
              # avoid Bundler::Source::Git::GitNotInstalledError
              unset APT_INSTALL_GIT
              ;;
            *)
              ;;
          esac
          sudo apt-get install --no-install-recommends -q -y build-essential libssl-dev libyaml-dev libreadline6-dev zlib1g-dev libncurses5-dev libffi-dev libgdbm-dev bison- autoconf- $APT_INSTALL_RUBY $APT_INSTALL_GIT
      - name: Fixed world writable dirs
        run: |
          mkdir $HOME/.gem
          chmod -v a-w $HOME $HOME/.config
          sudo chmod -R a-w /usr/share
          sudo bash -c 'IFS=:; for d in '"$PATH"'; do chmod -v a-w $d; done' || :
      - name: Create ~/.local
        run: ls -al $HOME && sudo install -o $USER -d $HOME/.local
      - name: Set ENV
        run: |
          echo "JOBS=-j$((1 + $(nproc --all)))" >> $GITHUB_ENV
      - name: configure
        run: cd snapshot-*/ && ./configure
      - name: make
        run: cd snapshot-*/ && make $JOBS
      - name: Tests
        run: cd snapshot-*/ && env -u XDG_CONFIG_HOME make $JOBS -s ${{ matrix.test_task }}
        env:
          RUBY_TESTOPTS: "-q --tty=no"
      # leaked-globals since 2.7
      - name: Leaked Globals
        run: cd snapshot-*/ && make -s leaked-globals
        if: matrix.test_task == 'check'
      - name: make install without root privilege
        run: cd snapshot-*/ && make $JOBS install DESTDIR="/tmp/destdir"
        if: matrix.test_task == 'check'
      - name: make install
        run: cd snapshot-*/ && sudo make $JOBS install
        if: matrix.test_task == 'check'
      - name: ruby -v
        run: ruby -v
        if: matrix.test_task == 'check'
      - name: Show .gem
        run: find $HOME/.gem -ls
      - name: Show .local
        run: find $HOME/.local -ls
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "text": "${{ job.status }}: ${{ matrix.os }} / ${{ matrix.test_task }} <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
        if: failure()

  macos:
    needs: make-snapshot
    strategy:
      matrix:
        test_task: [check, test-bundled-gems]
        os: [macos-latest]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - run: env | sort
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - uses: actions/download-artifact@master
        with:
          name: Packages
          path: pkg
      - name: Extract
        run: tar xf pkg/*.tar.xz
      - name: Apply patch
        run: |
          set -x
          curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
          cd snapshot-*/
          git apply ../ruby.patch
        shell: bash
        env:
          RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
        if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
      - name: Update spec
        run: |
          set -x
          git clone --depth=1 https://github.com/ruby/ruby ruby
          cd snapshot-*/
          rm -rf spec/mspec spec/ruby
          mv -v ../ruby/spec/mspec ../ruby/spec/ruby spec
        if: matrix.test_task == 'check'
      - name: Install libraries
        run: |
          with_retry () {
            "$@" || { sleep 5 && "$@"; } || { sleep 60 && "$@"; }
          }
          set -x
          with_retry brew update
          with_retry brew upgrade
          with_retry brew install gdbm gmp libffi openssl@1.1 zlib autoconf automake libtool readline
      - name: Set ENV
        run: |
          echo "JOBS=-j$((1 + $(sysctl -n hw.activecpu)))" >> $GITHUB_ENV
      - name: configure
        run: cd snapshot-*/ && ./configure --with-openssl-dir=$(brew --prefix openssl@1.1) --with-readline-dir=$(brew --prefix readline)
      - name: make
        run: cd snapshot-*/ && make $JOBS
      - name: Tests
        run: cd snapshot-*/ && make $JOBS -s ${{ matrix.test_task }}
        env:
          RUBY_TESTOPTS: "-q --tty=no"
      # leaked-globals since 2.7
      - name: Leaked Globals
        run: cd snapshot-*/ && make -s leaked-globals
        if: matrix.test_task == 'check'
      - name: make install without root privilege
        run: cd snapshot-*/ && make $JOBS install DESTDIR="/tmp/destdir"
        if: matrix.test_task == 'check'
      - name: make install
        run: cd snapshot-*/ && sudo make $JOBS install
        if: matrix.test_task == 'check'
      - name: ruby -v
        run: /usr/local/bin/ruby -v
        if: matrix.test_task == 'check'
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "text": "${{ job.status }}: ${{ matrix.os }} / ${{ matrix.test_task }} <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
        if: failure()

  windows:
    needs: make-snapshot
    strategy:
      matrix:
        os: [windows-2019]
        vs: [2019]
        test_task: [test]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    steps:
      - run: env | sort
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"

      - name: Install libraries with vcpkg
        run: |
          vcpkg --triplet x64-windows install readline zlib
      - name: Install libraries with chocolatey
        run: |
          Choco-Install -PackageName openssl
          Choco-Install -PackageName winflexbison3
        shell: pwsh
      - uses: actions/download-artifact@master
        with:
          name: Packages
          path: pkg
      - name: Extract
        run: 7z x pkg/*.zip
      - name: Apply patch
        run: |
          set -x
          curl -sSL "${RUBY_PATCH_URL}" -o ruby.patch
          cd snapshot-*/
          git apply ../ruby.patch
        shell: bash
        env:
          RUBY_PATCH_URL: "${{ github.event.inputs.RUBY_PATCH_URL }}"
        if: "${{ github.event.inputs.RUBY_PATCH_URL != '' }}"
      - name: configure
        run: |
          cd snapshot-*
          call "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          win32/configure.bat --disable-install-doc --without-ext=+,dbm,gdbm --enable-bundled-libffi --with-opt-dir=C:/vcpkg/installed/x64-windows
        shell: cmd
      - name: nmake
        run: |
          cd snapshot-*
          call "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          set YACC=win_bison
          nmake up
          nmake
        shell: cmd
      - name: nmake test
        run: |
          cd snapshot-*
          call "C:\Program Files (x86)\Microsoft Visual Studio\${{ matrix.vs }}\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
          nmake ${{ matrix.test_task }}
        shell: cmd
      - name: ruby -v
        run: |
          cd snapshot-*
          .\ruby -v
      - uses: k0kubun/action-slack@v2.0.0
        with:
          payload: |
            {
              "attachments": [{
                "text": "${{ job.status }}: ${{ matrix.os }} (vs${{ matrix.vs }}) / ${{ matrix.test_task }} <https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}|${{ github.workflow }}>",
                "color": "danger"
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SNAPSHOT_SLACK_WEBHOOK_URL }}
        if: failure()
